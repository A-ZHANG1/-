1. 156//给定一个二叉树，其中所有的右节点要么是具有兄弟节点（拥有相同父节点的左节点）的叶节点，要么为空，将此二叉树上下翻转并将它变成一棵树， 原来的右节点将转换成左
  叶节点。返回新的根。 
  ```{java}
  // 左->根，右->左,根->右
  public TreeNode upsideDownBinaryTree(TreeNode root) {
          if(root == null || root.left == null) return root;
          TreeNode l = root.left, r = root.right;
          TreeNode res = upsideDownBinaryTree(l);
          l.left = r;
          l.right = root;
          root.left = null;
          root.right = null;
          return res;
      }
    // O(?)
```
2. 157 //给你一个文件，并且该文件只能通过给定的 read4 方法来读取，请实现一个方法使其能够读取 n 个字符。 
```{java}
public int read(char[] buf, int n) {
        int res = 0, cur = 0;
        char[] tmp = new char[4];
        while((cur = read4(tmp)) != 0){
            for (int i = 0; i < cur && res < n; i++) {
                buf[res] = tmp[i];
                res ++;
            }
        }
        return res;
    }
```
3. 158//给你一个文件，并且该文件只能通过给定的 read4 方法来读取，请实现一个方法使其能够读取 n 个字符。注意：你的 read 方法可能会被调用多次。 
```{java}
int i = 0, size = 0; // tmp, read4() return length
    char[] tmp = new char[4];

    public int read(char[] buf, int n) {
        int idx = 0; // buf
        while(idx < n){
            if(size == 0){
                size = read4(tmp);
                if(size == 0) break;
            }
            while(idx < n && i < size){
                buf[idx ++] = tmp[i ++];
            }
            if(size == i){
                i = 0; size = 0;
            }
        }
        return idx;
    }
```
4. 159 // 给定一个字符串 s ，找出 至多 包含两个不同字符的最长子串 t ，并返回该子串的长度。 
```{java}
public int lengthOfLongestSubstringTwoDistinct(String s) {
        Map<Character, Integer> map = new HashMap<>();
        int l = 0, r = 0, res = 0;
        char[] sArr = s.toCharArray();
        for (int i = 0; i < sArr.length; i++) {
            char c = sArr[i];
            if(map.keySet().contains(c)) map.put(c, i);
            else{
                if(map.keySet().size() >= 2){
                    int del_idx = Collections.min(map.values());
                    map.remove(s.charAt(del_idx));
                    l = del_idx + 1;
                }

                map.put(c, i);
            }
            res = Math.max(res, i - l + 1);
//            if(res == 4) System.out.println(i+","+l+","+map);
        }
        return res;
    }

```
5. 161//给定两个字符串 s 和 t，判断他们的编辑距离是否为 1。 插入、删除、替换
```
public boolean isOneEditDistance(String s, String t) {
        if(s.length() < t.length()){
            String tmp = s;s = t;t = tmp;
        }
        if(s.length() - t.length() > 1) return false;
        for (int i = 0; i < t.length(); i++) {
            if(s.charAt(i) != t.charAt(i)){
                if(s.length() == t.length()) return s.substring(i + 1).equals(t.substring(i + 1));
                else return s.substring(i + 1).equals(t.substring(i));
            }
        }
        return s.length() - 1 ==  t.length(); // "c" "c"; "a" ""; "A" "a";
    }
```
6. 163//给定一个排序的整数数组 nums ，其中元素的范围在 闭区间 [lower, upper] 当中，返回不包含在数组中的缺失区间。 
```
public List<String> findMissingRanges(int[] nums, int lower, int upper) {

        List<String> res = new ArrayList<>();
//        if(nums.length == 0) return res; // []
        int pre = lower - 1; // [], 1, 1
        for (int i = 0; i < nums.length; i++) {
            if(nums[i] - pre == 2) res.add(String.valueOf(pre + 1));
            else if(nums[i] - pre > 2) res.add((pre + 1)+ "->" + (nums[i] - 1));
            pre = nums[i];
        }
        if(upper - pre == 1)res.add(String.valueOf(pre + 1));
        else if(upper - pre > 1)res.add((pre + 1)+ "->" + upper);
        return res;
    }
```
7.244
```
map.put(words[i], new ArrayList<Integer>(Arrays.asList(i)));
```
8.245 246 247 250
```
int count = 0;
    public int countUnivalSubtrees(TreeNode root) {
        if (root == null) return 0;
        isUnival(root);
        return count;
    }

    private boolean isUnival(TreeNode root) {
        if (root == null) return true;
        if(isUnival(root.left) &  isUnival(root.right)){// 不可以短路掉！！
            if(root.left != null && root.left.val != root.val) return false;
            if(root.right != null && root.right.val != root.val) return false;
            count ++;
            return true;
        }
        return false;
    }
   ```
   9.248 //Write a function to count the total strobogrammatic numbers that exist in the range of low <= num <= high.A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).
   ```
public int strobogrammaticInRange(String low, String high) {
        int l = low.length(), h = high.length(), res = 0;
        List<String> candidates = new ArrayList<>();
        for (int i = l; i <= h; i++) {
            candidates.addAll(helper(i, i));
        }
        for(String c: candidates){
            if(c.length() == l && c.compareTo(low) < 0 || c.length() == h && c.compareTo(high) > 0) continue;
//            System.out.println(c);
            res++;
        }
        return res;
    }
    public List<String> helper(int n, int max){
        if(n == 0) return new ArrayList<String>(Arrays.asList(""));
        if(n == 1) return new ArrayList<String>(Arrays.asList("0","1","8"));
        List<String> res = new ArrayList<>();
        List<String> list = helper(n - 2, max);
        for (String s: list) {
            if(n != max) res.add("0" + s + "0");
            res.add("1" + s + "1");
            res.add("8" + s + "8");
            res.add("6" + s + "9");
            res.add("9" + s + "6");
        }
        return res;
    }
```
10. 249 将移位相同的字符串放到同一个list里返回.认为成环.
// 输入：["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"]
//输出：
//[
//  ["abc","bcd","xyz"],
//  ["az","ba"], // !! 0,26和0,-1
//  ["acef"],
//  ["a","z"]
//]

```
public List<List<String>> groupStrings(String[] strings) {
        Map<String, List<String>> map = new HashMap<>();
        for(String s: strings){
            String encode = "0";
            for (int i = 1; i < s.length(); i++) {
                int tmp = s.charAt(i) - s.charAt(0);
                if(tmp < 0) tmp += 26; // 成环的处理
                encode += tmp;
                encode += ",";
            }
            List<String> cur = map.getOrDefault(encode, new ArrayList<String>());
            cur.add(s);
            map.put(encode, cur);
        }
//        System.out.println(map);
        return new ArrayList<>(map.values());
    }
```
11. 252//设计实现二维数组hasNext()函数
```
1. 压扁到list里 时间O(N + v) 空间O(N)
2. 双指针 时间O(v) 空间O(1) ？？ 

```
12.//给你一个会议时间安排的数组 intervals ，每个会议时间都会包括开始和结束的时间 intervals[i] = [starti, endi] ，为避免
   //会议冲突，同时要考虑充分利用会议室资源，请你计算至少需要多少间会议室，才能满足这些会议安排。 
```

```
   